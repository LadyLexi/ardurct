#summary Details about the LCD_PCD8544 library
=Arduino library for LCD_PCD8544=
<img src="http://ardurct.googlecode.com/svn/images/LCD_PCD8544.jpg" width="300">

[http://code.google.com/p/ardurct/downloads/list http://www.gstatic.com/codesite/ph/images/dl_arrow.gif] [http://code.google.com/p/ardurct/downloads/list Download]

===Content===
The library contains code to drive one or several LCD displays at the same time (see the dual screen example below) such as a [http://www.sparkfun.com/products/10168 Nokia5100 LCD].<br>
This library contains 2 drivers:
 * a text based driver [http://code.google.com/p/ardurct/source/browse/trunk/libraries/LCD_PCD8544/LCD_PCD8544.h <LCD_PCD8544.h>] to print simple texts on the screen. 
  * can act as a terminal (including new lines)
  * can draw progress bars and toggle switches
  * allows definition and printing of glyphs
 * a vector graphic driver [http://code.google.com/p/ardurct/source/browse/trunk/libraries/LCD_PCD8544/LCD_PCD8544.h <LCD_PCD8544_VG.h>] to draw text and graphical elements. 
  * can draw or fill points, lines, circles, rectangles and ellipses.
  * can draw lines of various thickness.  
  * can draw text with 3 different font size:
    * 3x5, complete: lowercase letters are transformed in uppercase
    * 4x6, only numbers and space (see drawMediumFontTime and drawMediumFontValueRA in LCD_PCD8544_VG.h)
    * 5x7, complete
The 2 drivers co-exist because the graphic one will take 504 bytes of RAM to store the screen. The text one will not take any but still allows limited graphics through bitmaps.

===Pin mapping===
||*Arduino*||+3.3v ||GND ||3  ||4  ||5  ||6  ||7  ||
||*LCD*||VCC || GND ||SCLK ||SDIN ||DC ||RESET ||SCE ||

This default mapping can be overwritten by calling 
{{{LCD_PCD8544(uint8_t sce, uint8_t sclk, uint8_t sdin, uint8_t dc, uint8_t reset);}}} 
at initialization with as many parameters as required by your design.

It can also be changed in LCD_PCD8544_Config.cpp.

===Example usage===
http://ardurct.googlecode.com/svn/images/LCD_PCD8544_library.jpg<br>
,,Note: this screen copy is obtained with the ,,[http://code.google.com/p/ardurct/downloads/list LCD_PCD8544_Simulator]
{{{
#include <LCD_PCD8544.h>
#include <LCD_PCD8544_VG.h>

LCD_PCD8544_VG lcdG(7);    // uses D7 as SCE
LCD_PCD8544 lcdT(8);       // uses D8 as SCE

uint8_t header[] = { 
    0x5F, 0x45, 0x5B, 0x40, 0x54, 0x48, 0x54, 0x40, 0x40, 0x50, 0x50, 0x50, 0x58, 0x58, 0x58, 0x5C,
    0x5C, 0x5C, 0x5E, 0x5E, 0x5E, 0x5F, 0x5F, 0x5F, 0x40, 0x40, 0x40, 0x7F, 0x40, 0x40, 0x5F, 0x45, 
    0x5B, 0x40, 0x5F, 0x55, 0x51, 0x40, 0x5F, 0x42, 0x5F, 0x40, 0x40, 0x5F, 0x51, 0x51, 0x51, 0x51, 
    0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
    0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
    0x51, 0x5F, 0x4E, 0x4E };

void setup() {
    lcdG.begin();
    lcdG.setCursor(0, 0);
    lcdG.print("Hello world");
    lcdG.drawSmallFontText("Hello world", 0, 10);
    lcdG.setCursor(7, 3);
    lcdG.print("8:20:35");
    lcdG.drawMediumFontTime(8, 20, 35, 50, 33);
    lcdG.drawSmallFontText("8:20:35", 56, 42);
    lcdG.drawEllipse(10, 30, 9, 8, ON);
    lcdG.drawLine(10, 30, 20, 48, ON, 2);
    lcdG.fillRectangle(23, 20, 28, 28, ON);
    lcdG.updateDisplay();

    lcdT.begin();
    lcdT.drawBitmap(header, 0, 0, 84, 8);
    lcdT.setCursor(0, 2);
    lcdT.print("Ya");
    lcdT.drawProgressBar(2, 2, 12, 50, LCD_PCD8544_PROGRESS_BAR_STYLE_LINE);
    lcdT.setCursor(0, 3);
    lcdT.print("Th");
    lcdT.drawProgressBar(2, 3, 12, 80, LCD_PCD8544_PROGRESS_BAR_STYLE_FILLED);
    lcdT.setCursor(0, 5);
    lcdT.print("Au");
    lcdT.drawToggleSwitch(2,5, 12, 4, 1);
}

void loop() {
}
}}}