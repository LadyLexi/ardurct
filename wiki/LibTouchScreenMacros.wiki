#summary TouchScreen Arduino library example - Macros

<img src="http://ardurct.googlecode.com/svn/images/MacroTests2.png" align="right"><br>

===Description===
The library contains a macro language to draw or affect graphics such as: 
 * Texts: 4 different size, bold and overlay
 * Lines: variable thickness. 
 * Triangles: filled or not, with variable thickness.
 * Rectangles: filled or not, with variable thickness.
 * Rounded rectangles: filled or not, with variable thickness.
 * Arcs: filled or not, with variable thickness.
 * Circles: filled or not, with variable thickness.
 * Presets: erase the screen, set the thickness, the font, the scale
 * Eeprom: save and retrieve macros in and from the Eeprom
===Principles===
 * A macro is a serie of drawing commands which can be chained together.
 * Each command is a few letters followed by a space and some parameters separated by spaces
  * Case: There is no case sentitiveness. 
  * Chaining: If the number of parameters is not sufficient to finish the command, the last point reached by the previous macro command is used.
  * Numbers: Colors are in hexadecimal, all other numbers are in decimal
===Code===
To produce the MacroTests images above, use the following code.
{{{
#include <TouchScreen.h>

TouchScreen touchscreen;

// size 23x37
uint8_t seven[] = "ld 0 0 22 0 ld 0 9 arnww 38";
uint8_t eight[] = "ld 10 0 2 0 ae 8 ld -2 0 ld 2 0 ae 10 ld -2 0 aw 10 aw 8";

uint8_t buffer[256];
uint8_t bufferPtr = 0;

public void setup() {
    touchscreen.begin(BLACK, WHITE, FONT_MEDIUM, FONT_PLAIN, NO_OVERLAY);
    touchscreen.setBacklight(180);
    
    // draw in blue, with a scalable line thickness of 2
    touchscreen.executeMacro("pts 2 pc 1F");
    // draw a seven
    touchscreen.executeMacro(seven, 10, 10, 3, 1, true);
    // write eight into eeprom for future use, in slot 0
    touchscreen.executeMacro("w 0 " + eight);
    // write hello into eeprom for future use, in slot 1
    touchscreen.executeMacro("w 1 s 0 0 \"Hello\"");
    // set foreground to red
    touchscreen.executeMacro("pc F800 pts 2");
    // draw the macro stored in eeprom in slot 0
    touchscreen.executeMacro("e 0", 120, 10, 3, 1, true);
    // draw the macro stored in eeprom in slot 1
    // draw in size 1 black
    touchscreen.executeMacro("pf 1 pc 0 e 1", 10, 160, 1, 1, true);
    // draw in size 2 bold gray
    touchscreen.executeMacro("pfb 2 pc 9CD3 e 1", 10, 180, 1, 1, true);

    delay(5000);
}

public void loop() {
    while (Serial.available()) buffer[bufferPtr++] = Serial.read();
    if (bufferPtr == 0) return;
    
    // wait for end of sentence
    if (buffer[bufferPtr-1] == '.') {
        // mark end of macro
        buffer[bufferPtr-1] = 0;
        bufferPtr = 0;
        // execute the macro
        touchscreen.executeMacro(buffer, 10, 10);
    }
    delay(10);
}

}}}

===Language===
Items between brackets can be ommited.
<table>
<tr><td>p	<td>*presets*<td><img src="http://ardurct.googlecode.com/svn/images/blank.jpg" width="25" height="10"><td>can preset the thickness, color, background, scale, fontSize, fontBold, fontOverlay
<tr><td>	<td>pe		<td>	<td>erase the screen: fill the screen with background
<tr><td>	<td>pt thickness<td>	<td>preset the thickness
<tr><td>	<td>ps scale (div)<td>	<td>preset the scale, all further drawing will be scaled by scale/div
<tr><td>	<td>pc color<td>	<td>preset the foreground color
<tr><td>	<td>pb color<td>	<td>preset the background color
<tr><td>	<td>pf(b)(o) size<td>	<td>preset the font
<tr><td>	<td>		<td>b<td>if present the font will be bold
<tr><td>	<td>		<td>o<td>if present the font will be overlaid
 *		
 *		l	Line
 *			l[d] x1 y1 [x2 y2]
 *				d		delta: x1 and y1 (or x2 and y2 if they exist) are delta values relative to last point drawn
 *				x1 y1	start or next point in the line
 *				x2 y2	next point in the line
 *
 *		a	Arc			can be drawn clockwise or counter clockwise and filled
 *			a[r][f]DDD [x0 y0] radius
 *				r		if present, the arc will be drawn reversed (counter clockwise). 
 *						i.e.: if DDD=NE
 *							if r the East end will be connected to the last point drawn
 *							else the North end will be attached
 *				f		if present, the arc will be filled		
 *				DDD 	can be n, s, e, w, ne, nw, se, sw, nne, nee, see, sse, ssw, sww, nww, nnw
 *				radius	radius of the arc
 *				x0 y0	center of the arc. If ommited the top (or bottom) of the arc will be connected to the last point drawn
 *
 *		r	Rectangle	can be rounded and filled
 *			r[r][f] x1 y1 width height [radius]
 *				r		if present, the rectangle will be rounded and radius is required
 *				f		if present, the rectangle will be filled
 *				x1 y1	top left of the rectangle
 *				width
 *				height	width and height of the rectangle
 *
 *		t	Triangle	can be filled
 *			t[f] x1 y1 x2 y2 x3 y3
 *				x1 y1	first point
 *				x2 y2	second point
 *				x3 y3	third point
 *
 *		c	Circle		can be filled
 *			c[f] x0 y0 radius
 *				x0 y0	center of the circle
 *				radius	radius of the circle
 * 
 *		s	String
 *			s x1 y1 "text"
 *				x1 y1	top left of the first char drawn
 *				"text"	text to draw. Some characters can be escaped \n, \", \\
 *
 *		w	Write		Write a macro in EEPROM, all following commands are written to the eeprom
 *			w n
 *				n		the macro number to write
 *
 *		e	Execute		Execute a macro from EEPROM
 *			e[r] n
 *				r		reset the macro variables before executing
 *				n		the macro number to execute
