#summary Details about the ArduRCT_EventManager library

= Arduino library to manage events=
== Organisation ==
<img src="http://ardurct.googlecode.com/svn/images/ArduRCT_EventManager.png"><br>
== Principle ==
At the begining of your file
 * Define source objects for the EventManager: they will be polled on a regular basis
 * Define handler objects for the collected events: they will be called if a corresponding event is found.
In the setup()
 * Register the sources
 * Register the handlers
In the loop()
 * call manageEvents: this will call the handlers for the events created by the sources
== Sources ==
||Object||Hardware||Created if||Events generated||
|| || ||The EventManager loop is entered||EVENT_SYSTEM_TICK||
||ArduRCT_RealTimeClock|| ||A time related event occurs||EVENT_TIME_SECOND<br>EVENT_TIME_MINUTE<br>EVENT_TIME_HOUR<br>EVENT_TIME_DAY<br>EVENT_TIME_MONTH<br>EVENT_TIME_YEAR<br>EVENT_TIME_ALARM||
||ArduRCT_Switch||Momentary closed switch||The switch is pressed or released||EVENT_SWITCH_PRESSED<br>EVENT_SWITCH_RELEASED<br>EVENT_SWITCH_REPEATING||
||ArduRCT_Encoder||Rotary encoder||The encoder is rotated||EVENT_ENCODER_DECREASE<br>EVENT_ENCODER_INCREASE||
||ArduRCT_TouchPanel||Touchpanel||The touchpanel is touched||EVENT_TOUCHPANEL_PRESSED<br>EVENT_TOUCHPANEL_DRAGGED<br>EVENT_TOUCHPANEL_RELEASED||
||ArduRCT_Analog||Analog port||The analog value changes||EVENT_ANALOG_DECREASE<br>EVENT_ANALOG_INCREASE||

Switches, touchpanels and rotary encoders are automatically debounced.

== Handlers ==
An handler associates a callback with an event. The handlers are called in the order in which they are registered.
If the handler returns EVENT_HANDLING_EXIT, the following handlers for the event are not called.

The callback can be called by:
 * An event such as the one generated by the source
 * A class of event such as EVENT_SYSTEM, EVENT_TIME, EVENT_SWITCH, EVENT_ENCODER, EVENT_TOUCHPANEL, EVENT_ANALOG
 * An event and an event value

The EVENT_SYSTEM_TICK handler is slighly apart: it can be called every N tick. The tick counter is 8 bit long. 
 * ArduRCT_EventHandler everyTick(EVENT_SYSTEM_TICK, 1, &function) will call function every tick
 * ArduRCT_EventHandler everyTick(EVENT_SYSTEM_TICK, 4, &function) will call function every 4 ticks
 * ArduRCT_EventHandler everyTick(EVENT_SYSTEM_TICK, 64, &function) will call function every 64 ticks

== Example ==
{{{
#include <ArduRCT_EventManager.h>

// define the eventManager
ArduRCT_EventManager eventManager;

// define some switches
ArduRCT_Switch on(3); 
ArduRCT_Switch off(4); 
ArduRCT_Switch momentary(5); 

// call handleButtons if an event happen on any switch
ArduRCT_EventHandler buttonsHandler(EVENT_SWITCH, EVENT_ANY_VALUE, &handleButtons); 

void setup() {
    // register the switches
    eventManager.registerSwitch(&on);
    eventManager.registerEventHandler(&off);
    eventManager.registerEventHandler(&momentary);
    // register an EventHandler for the switches
    eventManager.registerEventHandler(&buttonsHandler);
}

void loop() {
    eventManager.manageEvents();
}

int8_t handleButtons(uint8_t eventType, uint8_t buttonId) {
    if (eventType == EVENT_SWITCH_PRESSED) {
        if (buttonId == 4) digitalWrite(13, LOW);
        else digitalWrite(13, HIGH);
    } else if (eventType == EVENT_SWITCH_RELEASED) {
        if (buttonId == 5) digitalWrite(13, LOW);
    }
    return EVENT_HANDLING_DONE;
}

}}}